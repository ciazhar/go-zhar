// Code generated by MockGen. DO NOT EDIT.
// Source: ./examples/scalable_system/l0/internal/repository/postgres/user/contract.go
//
// Generated by this command:
//
//	mockgen -source=./examples/scalable_system/l0/internal/repository/postgres/user/contract.go -destination=./examples/scalable_system/l0/internal/repository/postgres/user/mock/mock_contract.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	request "github.com/ciazhar/go-zhar/examples/scalable_system/l0/internal/model/request"
	response "github.com/ciazhar/go-zhar/examples/scalable_system/l0/internal/model/response"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryContract is a mock of UserRepositoryContract interface.
type MockUserRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryContractMockRecorder
	isgomock struct{}
}

// MockUserRepositoryContractMockRecorder is the mock recorder for MockUserRepositoryContract.
type MockUserRepositoryContractMockRecorder struct {
	mock *MockUserRepositoryContract
}

// NewMockUserRepositoryContract creates a new mock instance.
func NewMockUserRepositoryContract(ctrl *gomock.Controller) *MockUserRepositoryContract {
	mock := &MockUserRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryContract) EXPECT() *MockUserRepositoryContractMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryContract) CreateUser(ctx context.Context, req request.CreateUserBodyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryContractMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryContract)(nil).CreateUser), ctx, req)
}

// DeleteUser mocks base method.
func (m *MockUserRepositoryContract) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryContractMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepositoryContract)(nil).DeleteUser), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockUserRepositoryContract) GetUserByID(ctx context.Context, id string) (*response.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*response.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryContractMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepositoryContract)(nil).GetUserByID), ctx, id)
}

// GetUsers mocks base method.
func (m *MockUserRepositoryContract) GetUsers(ctx context.Context, page, limit int) ([]response.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, page, limit)
	ret0, _ := ret[0].([]response.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepositoryContractMockRecorder) GetUsers(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepositoryContract)(nil).GetUsers), ctx, page, limit)
}

// UpdateUser mocks base method.
func (m *MockUserRepositoryContract) UpdateUser(ctx context.Context, id string, req request.UpdateUserBodyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryContractMockRecorder) UpdateUser(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepositoryContract)(nil).UpdateUser), ctx, id, req)
}
