// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rate_limiter/contract.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/rate_limiter/contract.go -destination=./pkg/rate_limiter/mock/mock_contract.go
//

// Package mock_rate_limiter is a generated GoMock package.
package mock_rate_limiter

import (
	reflect "reflect"
	time "time"

	rate_limiter "github.com/ciazhar/go-zhar/pkg/rate_limiter"
	gomock "go.uber.org/mock/gomock"
)

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
	isgomock struct{}
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiter) Allow(key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterMockRecorder) Allow(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiter)(nil).Allow), key)
}

// GetKeyType mocks base method.
func (m *MockRateLimiter) GetKeyType() rate_limiter.KeyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyType")
	ret0, _ := ret[0].(rate_limiter.KeyType)
	return ret0
}

// GetKeyType indicates an expected call of GetKeyType.
func (mr *MockRateLimiterMockRecorder) GetKeyType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyType", reflect.TypeOf((*MockRateLimiter)(nil).GetKeyType))
}

// MockRateLimitStore is a mock of RateLimitStore interface.
type MockRateLimitStore struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitStoreMockRecorder
	isgomock struct{}
}

// MockRateLimitStoreMockRecorder is the mock recorder for MockRateLimitStore.
type MockRateLimitStoreMockRecorder struct {
	mock *MockRateLimitStore
}

// NewMockRateLimitStore creates a new mock instance.
func NewMockRateLimitStore(ctrl *gomock.Controller) *MockRateLimitStore {
	mock := &MockRateLimitStore{ctrl: ctrl}
	mock.recorder = &MockRateLimitStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitStore) EXPECT() *MockRateLimitStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRateLimitStore) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockRateLimitStoreMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRateLimitStore)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockRateLimitStore) Get(key string, out any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, out)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRateLimitStoreMockRecorder) Get(key, out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRateLimitStore)(nil).Get), key, out)
}

// Set mocks base method.
func (m *MockRateLimitStore) Set(key string, value any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRateLimitStoreMockRecorder) Set(key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRateLimitStore)(nil).Set), key, value, ttl)
}

// Type mocks base method.
func (m *MockRateLimitStore) Type() rate_limiter.StorageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(rate_limiter.StorageType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockRateLimitStoreMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockRateLimitStore)(nil).Type))
}
